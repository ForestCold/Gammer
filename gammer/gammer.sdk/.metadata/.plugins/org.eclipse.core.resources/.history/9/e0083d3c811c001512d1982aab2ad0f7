#include "xparameters.h"
#include "xgpio.h"
#include "xutil.h"

/* 不带字库UC1701X 普通IO口驱动*/
const unsigned char ASCII8_16[]=      //可见ASC码 取模表
{
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x18,0x3C,0x3C,0x3C,0x18,0x18, 0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0x6C, 0x6C,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00,
0x18,0x18,0x7C,0xC6,0xC2,0xC0,0x7C,0x06, 0x86,0xC6,0x7C,0x18,0x18,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xC2,0xC6,0x0C,0x18, 0x30,0x60,0xC6,0x86,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x6C,0x6C,0x38,0x76,0xDC, 0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x0C,0x18,0x30,0x30,0x30,0x30, 0x30,0x30,0x18,0x0C,0x00,0x00,0x00,0x00,
0x00,0x00,0x30,0x18,0x0C,0x0C,0x0C,0x0C, 0x0C,0x0C,0x18,0x30,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x66,0x3C,0xFF, 0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7E, 0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x18,0x18,0x18,0x30,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x02,0x06,0x0C,0x18, 0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0xC6,0xCE,0xD6,0xD6, 0xE6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x18,0x38,0x78,0x18,0x18,0x18, 0x18,0x18,0x18,0x7E,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0x06,0x0C,0x18,0x30, 0x60,0xC0,0xC6,0xFE,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0x06,0x06,0x3C,0x06, 0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x0C,0x1C,0x3C,0x6C,0xCC,0xFE, 0x0C,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00,
0x00,0x00,0xFE,0xC0,0xC0,0xC0,0xFC,0x0E, 0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x60,0xC0,0xC0,0xFC,0xC6, 0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0xFE,0xC6,0x06,0x06,0x0C,0x18, 0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0xC6, 0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7E,0x06, 0x06,0x06,0x0C,0x78,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00, 0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00, 0x00,0x18,0x18,0x30,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x06,0x0C,0x18,0x30,0x60, 0x30,0x18,0x0C,0x06,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00, 0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x06, 0x0C,0x18,0x30,0x60,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0xC6,0x0C,0x18,0x18, 0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x7C,0xC6,0xC6,0xDE,0xDE, 0xDE,0xDC,0xC0,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE, 0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x66, 0x66,0x66,0x66,0xFC,0x00,0x00,0x00,0x00,
0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xC0, 0xC0,0xC2,0x66,0x3C,0x00,0x00,0x00,0x00,
0x00,0x00,0xF8,0x6C,0x66,0x66,0x66,0x66, 0x66,0x66,0x6C,0xF8,0x00,0x00,0x00,0x00,
0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68, 0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00,
0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68, 0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xDE, 0xC6,0xC6,0x66,0x3A,0x00,0x00,0x00,0x00,
0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6, 0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18, 0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
0x00,0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0x0C, 0xCC,0xCC,0xCC,0x78,0x00,0x00,0x00,0x00,
0x00,0x00,0xE6,0x66,0x6C,0x6C,0x78,0x78, 0x6C,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
0x00,0x00,0xF0,0x60,0x60,0x60,0x60,0x60, 0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00,
0x00,0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6, 0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
0x00,0x00,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE, 0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6, 0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00,
0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x60, 0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6, 0xC6,0xD6,0xDE,0x7C,0x0C,0x0E,0x00,0x00,
0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x6C, 0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
0x00,0x00,0x7C,0xC6,0xC6,0x60,0x38,0x0C, 0x06,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x7E,0x7E,0x5A,0x18,0x18,0x18, 0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6, 0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6, 0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00,
0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xD6, 0xD6,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00,
0x00,0x00,0xC6,0xC6,0x6C,0x6C,0x38,0x38, 0x6C,0x6C,0xC6,0xC6,0x00,0x00,0x00,0x00,
0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x18, 0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
0x00,0x00,0xFE,0xC6,0x86,0x0C,0x18,0x30, 0x60,0xC2,0xC6,0xFE,0x00,0x00,0x00,0x00,
0x00,0x00,0x3C,0x30,0x30,0x30,0x30,0x30, 0x30,0x30,0x30,0x3C,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x38, 0x1C,0x0E,0x06,0x02,0x00,0x00,0x00,0x00,
0x00,0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C, 0x0C,0x0C,0x0C,0x3C,0x00,0x00,0x00,0x00,
0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,
0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
0x00,0x00,0xE0,0x60,0x60,0x78,0x6C,0x66, 0x66,0x66,0x66,0xDC,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC0, 0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x1C,0x0C,0x0C,0x3C,0x6C,0xCC, 0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xFE, 0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x6C,0x64,0x60,0xF0,0x60, 0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC, 0xCC,0xCC,0xCC,0x7C,0x0C,0xCC,0x78,0x00,
0x00,0x00,0xE0,0x60,0x60,0x6C,0x76,0x66, 0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00,
0x00,0x00,0x18,0x18,0x00,0x38,0x18,0x18, 0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
0x00,0x00,0x06,0x06,0x00,0x0E,0x06,0x06, 0x06,0x06,0x06,0x06,0x66,0x66,0x3C,0x00,
0x00,0x00,0xE0,0x60,0x60,0x66,0x6C,0x78, 0x78,0x6C,0x66,0xE6,0x00,0x00,0x00,0x00,
0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18, 0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xEC,0xFE,0xD6, 0xD6,0xD6,0xD6,0xD6,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66, 0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC6, 0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66, 0x66,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00,
0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC, 0xCC,0xCC,0xCC,0x7C,0x0C,0x0C,0x1E,0x00,
0x00,0x00,0x00,0x00,0x00,0xDC,0x76,0x62, 0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0x60, 0x38,0x0C,0xC6,0x7C,0x00,0x00,0x00,0x00,
0x00,0x00,0x10,0x30,0x30,0xFC,0x30,0x30, 0x30,0x30,0x36,0x1C,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC, 0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66, 0x66,0x66,0x3C,0x18,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6, 0xD6,0xD6,0xFE,0x6C,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xC6,0x6C,0x38, 0x38,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6, 0xC6,0xC6,0xC6,0x7E,0x06,0x0C,0xF8,0x00,
0x00,0x00,0x00,0x00,0x00,0xFE,0xCC,0x18, 0x30,0x60,0xC6,0xFE,0x00,0x00,0x00,0x00,
0x00,0x00,0x0E,0x18,0x18,0x18,0x70,0x18, 0x18,0x18,0x18,0x0E,0x00,0x00,0x00,0x00,
0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x18, 0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00,
0x00,0x00,0x70,0x18,0x18,0x18,0x0E,0x18, 0x18,0x18,0x18,0x70,0x00,0x00,0x00,0x00,
0x00,0x00,0x76,0xDC,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xC6,0xFE,0x00,0x00,0x00,0x00,0x00, };

//上面的脚可以自己修改
#define  Display  0xAF     //显示开启
#define  Power    0x2F           //电源全开
#define  VO       0x24     //对比度调节
#define  AllPoint 0xA4           //非全屏显示
#define  ADCset   0xA1            //负向，131-4
#define  COMset   0xc0            //com0-com63
#define  ELECTVO  0x81     //亮度调节         调节颜色         不同的模块需要不同的  ELECTSET
#define  ELECTSET 0x2a           //亮度数值         调节颜色         不同的模块需要不同的        数值
#define  BIASSET  0xA2    //占空比1/9

u32 lastbit;
u32 lastsw;

void delay(int t)
{
	while(t--);
}

void send_8bit_mini12864(unsigned char d, XGpio *b, XGpio *s)  //传8位数据,高位先传
{
	    int i;
        for(i=0;i<8;i++)                    //循环8次,每次发送1个最高位
        {
                //digitalWrite(sck_mini12864,0);       //时钟拉低,一位数据开始
    	        XGpio_DiscreteWrite(s, 1, lastsw&(~1));
    	        lastsw = lastsw&(~1);
                if(d&0x80)                          //与上10000000,最高位如果是1,就数据位就高
                {
                        //digitalWrite(sda_mini12864,1);
                	XGpio_DiscreteWrite(s, 1, lastsw|(1<<4));
                	lastsw = lastsw|(1<<4);
                }
                else                                //与上10000000,最高位如果是0,就数据位就低
                {
                     //digitalWrite(sda_mini12864,0);
                     XGpio_DiscreteWrite(s, 1, lastsw&(~(1<<4)));
                     lastsw = lastsw&(~(1<<4));
                }
                //digitalWrite(sck_mini12864,1);       //一位数据发送完毕,时钟拉高
                XGpio_DiscreteWrite(s, 1, lastsw|1);
                lastsw = lastsw|1;
                d<<=1;                              // d|ddddddd0    抛掉最高位,其余数据左移一位,最低位填0
        }
}

void write_cmd_mini12864(unsigned char cmd, XGpio *b, XGpio *s)  //写命令
{
        //digitalWrite(cs_mini12864,0); //片选拉低,选中芯片
        XGpio_DiscreteWrite( s, 1, ~(1<<3)&lastsw);
        lastsw = ~(1<<3)&lastsw;
        //digitalWrite(rs_mini12864,0); //rs为低,写入命令
        XGpio_DiscreteWrite( s, 1, ~(1<<1)&lastsw);
        lastsw = ~(1<<1)&lastsw;
        send_8bit_mini12864(cmd,b,s);     //写入8位命令
}

void write_dat_mini12864(unsigned char dat, XGpio *b,XGpio *s)  //写数据
{
        //digitalWrite(cs_mini12864,0); //片选拉低,选中芯片
	    XGpio_DiscreteWrite( s, 1, ~(1<<3)&lastsw);
	    lastsw = ~(1<<3)&lastsw;
        //digitalWrite(rs_mini12864,1); //rs为高,写入数据
	    XGpio_DiscreteWrite( s, 1, (1<<1)|lastsw);
	    lastsw = (1<<1)|lastsw;
        send_8bit_mini12864(dat, b, s);          //写入8位数据
}

void mini12864_cl(XGpio *b,XGpio *s)         //清屏,其实就是把所有的地址全部填成0
{
  unsigned char x,y;
  for(y=0;y<8;y++)
  {
    write_cmd_mini12864(0xb0+y, b, s);
    write_cmd_mini12864(0x10, b, s);
    write_cmd_mini12864(0x00, b, s);
    for(x=0;x<132;x++)  write_dat_mini12864(0, b, s);
  }
}

void mini12864_Init( XGpio *b, XGpio *s )   //初始化
{
  //digitalWrite(cs_mini12864,LOW);
  XGpio_DiscreteWrite( s, 1, ~(1<<3)&lastsw);
  lastsw = ~(1<<3)&lastsw;
  //digitalWrite(rst_mini12864,LOW);          //物理重置
  XGpio_DiscreteWrite( s, 1, ~(1<<2)&lastsw);
  lastsw = ~(1<<2)&lastsw;
  delay(200);
  //digitalWrite(rst_mini12864,HIGH);
  XGpio_DiscreteWrite( s, 1, (1<<2)|lastsw);
  lastsw = (1<<2)|lastsw;
  delay(1000);
  write_cmd_mini12864(0xe2, b, s);                //软件重置
  delay(200);

//以下为初始设置,具体请参考数据手册

  write_cmd_mini12864(0x24,b, s);//对比度
  write_cmd_mini12864(0xa2,b, s);//BR=1/9
  write_cmd_mini12864(0xa0,b, s);//set seg direction
  write_cmd_mini12864(0xc8,b, s);//set com direction
  write_cmd_mini12864(0x2f,b, s);//set power control
  write_cmd_mini12864(0x40,b, s);//set scroll line
  write_cmd_mini12864(0x81,b, s);//SET ELECTRONIC VOLUME
  write_cmd_mini12864(0x20,b, s);//set pm: 通过改变这里的数值来改变电压
  //write_cmd(0xa6);//set inverse display           a6 off, a7 on
  //write_cmd(0xa4);//set all pixel on
  write_cmd_mini12864(0xaf,b, s);//开显示

  mini12864_cl(b, s);  //清屏
}

void write_add(unsigned char p, unsigned char l, XGpio *b, XGpio *s)  //页列转换
{
  write_cmd_mini12864(0xb0+p,b, s);                         //先给页数据 0-7,从上到下,页码是直接读取8位数据作为地址
  write_cmd_mini12864(0x10+(8*l/16),b, s);        //再是列 0-127,从左到右,列是先读取高四位，后读取低四位
  write_cmd_mini12864(0x00+(8*l%16),b, s);   //低四位
}


void show_string(unsigned char p, unsigned char l,char  *string, XGpio *b,XGpio *s)   //在第p页的l列
{                                                                                                                                        //显示一个字符串(数组中的元素)
    unsigned int X,i=0;
    write_add(p,l,b, s);    //页列转换函数
    int j;
    while(string[i++])               //判断是否为空
    {
        X=(string[i-1]-32)*16;           //将string中的元素(ASC码)匹配到预先写好的ASC数组之中
        for(j=0;j<16;j++) write_dat_mini12864(ASCII8_16[X++],b, s);         //发显示数据
    }
}

void show_number(unsigned char p, unsigned char l,unsigned int d, XGpio *b,XGpio *s)   //在第p页的l列
{                                                                                                                                        //显示一个字数字
  char ss[8];
  unsigned char m;
  m=0;
  do      //将d分离到数组s中
  {
    ss[m]=d%10;
    m++;
    d=d/10;
  }while(d);//此时m就是d的位数

   unsigned int X,i=0;
   write_add(p,l,b, s);                    //页列转换函数
   int z;
   for(z=m;z>0;z--)               //循环m次,没就是数字的位数
   {
    X=(ss[z-1]+48-32)*16;           //由于此时数组中的并非ASC码,而是真真的数字,所以转换时候系数不同
    int j;
    for(j=0;j<16;j++) write_dat_mini12864(ASCII8_16[X++],b, s);         //发显示数据
   }
}


int main(void)
{
	XGpio b,s;
	lastsw = 0;
	lastbit = 0;
	XGpio_Initialize(&b, XPAR_BTNS_4BIT_DEVICE_ID);
	XGpio_SetDataDirection(&b, 1, 0xffffffff);
	XGpio_Initialize(&s, XPAR_SW_4BIT_DEVICE_ID);
	XGpio_SetDataDirection(&s, 1, 0x00000000);
	mini12864_Init(&b,&s);
	while(1)
	{
		show_string(6,0,"G   ",&b,&s);
		show_string(5,0,"A   LL",&b,&s);
		show_string(4,0,"M B HY",&b,&s);
		show_string(3,0,"M y FF",&b,&s);
		show_string(2,0,"E   &",&b,&s);
		show_string(1,0,"R   ",&b,&s);
	}
}

